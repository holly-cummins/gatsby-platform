#!/usr/bin/env node

const fs = require("fs");
const request = require("request");
const path = require("path");
const metadataParser = require("markdown-yaml-metadata-parser");

const contentDir = require("fs").existsSync("../content") ? "../content" : "./content";
const dir = `${contentDir}/publications`;

// Make an async function that gets executed immediately
const processDirectory = async () => {
  // Our starting point
  try {
    // Get the files as an array
    const publications = await fs.promises.readdir(dir);

    // Loop them all with the new for...of
    for (const publication of publications) {
      console.log("doing", publication);
      // We perhaps should try and not assume the filename is index.md, but since it's generated by us, we're safe-ish
      const markdownPath = path.join(dir, publication, "index.md");

      if (!fs.existsSync(markdownPath)) {
        console.warn("WARNING: Could not find", markdownPath, "... Is the directory empty? ");
      } else {
        const source = await readFile(markdownPath);
        const metadata = metadataParser(source).metadata;
        // Stat the file to see if we have a file or dir
        const stat = await fs.promises.stat(markdownPath);
        const cover = metadata.cover;
        const imageUrl = metadata.imageUrl;
        const imagePath = path.join(dir, publication, cover);
        if (!fs.existsSync(imagePath)) {
          if (imageUrl) {
            console.log("Downloading", imageUrl);
            download(imageUrl, imagePath);
          } else {
            console.error(
              "ERROR: Cover image does not exist and imageUrl is not set for",
              publication
            );
          }
        } else {
          console.log(cover, "already exists, skipping.");
        }
      }
    } // End for...of
  } catch (e) {
    // Catch anything bad that happens
    console.error("We've thrown! Whoops!", e);
  }
};

const download = async (url, fileName) => {
  return new Promise(resolve => {
    request.head(url, (err, res, body) => {
      request(url)
        .pipe(fs.createWriteStream(fileName))
        .on("close", resolve);
    });
  });
};

const readFile = async fileName => {
  return new Promise(resolve => {
    fs.readFile(fileName, "utf8", (err, data) => {
      resolve(data);
    });
  });
};

const completeMarkdown = async () => {
  const imagePath = `${dir}/${cover}`;

  await download(imageUrl, imagePath);
};

return processDirectory();
